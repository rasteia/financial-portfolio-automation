# Docker Compose for Financial Portfolio Automation - Production
version: '3.8'

services:
  # PostgreSQL Database with production settings
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - portfolio-network-prod
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache with production settings
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis-prod
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data_prod:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - portfolio-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # API Service - Production
  api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.api
    container_name: portfolio-api-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./config/production:/app/config:ro
      - api_logs_prod:/app/logs
      - api_reports_prod:/app/reports
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    networks:
      - portfolio-network-prod
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      replicas: 2

  # CLI Service - Production
  cli:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.cli
    container_name: portfolio-cli-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./config/production:/app/config:ro
      - cli_logs_prod:/app/logs
      - cli_reports_prod:/app/reports
      - ./crontab.prod:/etc/cron.d/portfolio-cron:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["crond", "-f"]
    restart: always
    networks:
      - portfolio-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx Load Balancer - Production
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx-prod
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: always
    networks:
      - portfolio-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - portfolio-network-prod

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: portfolio-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - prometheus
    restart: always
    networks:
      - portfolio-network-prod

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: portfolio-loki
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "127.0.0.1:3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    networks:
      - portfolio-network-prod

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: portfolio-promtail
    volumes:
      - ./promtail.yml:/etc/promtail/config.yml:ro
      - api_logs_prod:/var/log/api:ro
      - cli_logs_prod:/var/log/cli:ro
      - nginx_logs_prod:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: always
    networks:
      - portfolio-network-prod

volumes:
  postgres_data_prod:
  redis_data_prod:
  api_logs_prod:
  api_reports_prod:
  cli_logs_prod:
  cli_reports_prod:
  nginx_logs_prod:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  portfolio-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16