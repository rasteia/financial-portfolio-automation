# Docker Compose for Financial Portfolio Automation - Development
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-postgres
    environment:
      POSTGRES_DB: portfolio_automation
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_automation"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - portfolio-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - portfolio-network

  # API Service
  api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.api
    container_name: portfolio-api
    environment:
      - DATABASE_URL=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio_automation
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./config:/app/config
      - api_logs:/app/logs
      - api_reports:/app/reports
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - portfolio-network

  # CLI Service (for scheduled tasks)
  cli:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.cli
    container_name: portfolio-cli
    environment:
      - DATABASE_URL=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio_automation
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./config:/app/config
      - cli_logs:/app/logs
      - cli_reports:/app/reports
      - ./crontab:/etc/cron.d/portfolio-cron
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["crond", "-f"]
    restart: unless-stopped
    networks:
      - portfolio-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - portfolio-network

volumes:
  postgres_data:
  redis_data:
  api_logs:
  api_reports:
  cli_logs:
  cli_reports:
  nginx_logs:

networks:
  portfolio-network:
    driver: bridge